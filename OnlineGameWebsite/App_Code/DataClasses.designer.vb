'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="GameDB")>  _
Partial Public Class DataClassesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertTblSlider(instance As TblSlider)
    End Sub
  Partial Private Sub UpdateTblSlider(instance As TblSlider)
    End Sub
  Partial Private Sub DeleteTblSlider(instance As TblSlider)
    End Sub
  Partial Private Sub InsertTblLog(instance As TblLog)
    End Sub
  Partial Private Sub UpdateTblLog(instance As TblLog)
    End Sub
  Partial Private Sub DeleteTblLog(instance As TblLog)
    End Sub
  Partial Private Sub InsertTblTRejectReason(instance As TblTRejectReason)
    End Sub
  Partial Private Sub UpdateTblTRejectReason(instance As TblTRejectReason)
    End Sub
  Partial Private Sub DeleteTblTRejectReason(instance As TblTRejectReason)
    End Sub
  Partial Private Sub InsertTblBankRecord(instance As TblBankRecord)
    End Sub
  Partial Private Sub UpdateTblBankRecord(instance As TblBankRecord)
    End Sub
  Partial Private Sub DeleteTblBankRecord(instance As TblBankRecord)
    End Sub
  Partial Private Sub InsertTblProduct(instance As TblProduct)
    End Sub
  Partial Private Sub UpdateTblProduct(instance As TblProduct)
    End Sub
  Partial Private Sub DeleteTblProduct(instance As TblProduct)
    End Sub
  Partial Private Sub InsertTblGameAccount(instance As TblGameAccount)
    End Sub
  Partial Private Sub UpdateTblGameAccount(instance As TblGameAccount)
    End Sub
  Partial Private Sub DeleteTblGameAccount(instance As TblGameAccount)
    End Sub
  Partial Private Sub InsertTblMember(instance As TblMember)
    End Sub
  Partial Private Sub UpdateTblMember(instance As TblMember)
    End Sub
  Partial Private Sub DeleteTblMember(instance As TblMember)
    End Sub
  Partial Private Sub InsertTblUser(instance As TblUser)
    End Sub
  Partial Private Sub UpdateTblUser(instance As TblUser)
    End Sub
  Partial Private Sub DeleteTblUser(instance As TblUser)
    End Sub
  Partial Private Sub InsertTblTransfer(instance As TblTransfer)
    End Sub
  Partial Private Sub UpdateTblTransfer(instance As TblTransfer)
    End Sub
  Partial Private Sub DeleteTblTransfer(instance As TblTransfer)
    End Sub
  Partial Private Sub InsertTblBank(instance As TblBank)
    End Sub
  Partial Private Sub UpdateTblBank(instance As TblBank)
    End Sub
  Partial Private Sub DeleteTblBank(instance As TblBank)
    End Sub
  Partial Private Sub InsertTblContact(instance As TblContact)
    End Sub
  Partial Private Sub UpdateTblContact(instance As TblContact)
    End Sub
  Partial Private Sub DeleteTblContact(instance As TblContact)
    End Sub
  Partial Private Sub InsertTblPromotion(instance As TblPromotion)
    End Sub
  Partial Private Sub UpdateTblPromotion(instance As TblPromotion)
    End Sub
  Partial Private Sub DeleteTblPromotion(instance As TblPromotion)
    End Sub
  Partial Private Sub InsertTblTransaction(instance As TblTransaction)
    End Sub
  Partial Private Sub UpdateTblTransaction(instance As TblTransaction)
    End Sub
  Partial Private Sub DeleteTblTransaction(instance As TblTransaction)
    End Sub
  Partial Private Sub InsertTblAffiliate(instance As TblAffiliate)
    End Sub
  Partial Private Sub UpdateTblAffiliate(instance As TblAffiliate)
    End Sub
  Partial Private Sub DeleteTblAffiliate(instance As TblAffiliate)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("GameDBConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property TblSliders() As System.Data.Linq.Table(Of TblSlider)
		Get
			Return Me.GetTable(Of TblSlider)
		End Get
	End Property
	
	Public ReadOnly Property TblLogs() As System.Data.Linq.Table(Of TblLog)
		Get
			Return Me.GetTable(Of TblLog)
		End Get
	End Property
	
	Public ReadOnly Property TblTRejectReasons() As System.Data.Linq.Table(Of TblTRejectReason)
		Get
			Return Me.GetTable(Of TblTRejectReason)
		End Get
	End Property
	
	Public ReadOnly Property TblBankRecords() As System.Data.Linq.Table(Of TblBankRecord)
		Get
			Return Me.GetTable(Of TblBankRecord)
		End Get
	End Property
	
	Public ReadOnly Property TblProducts() As System.Data.Linq.Table(Of TblProduct)
		Get
			Return Me.GetTable(Of TblProduct)
		End Get
	End Property
	
	Public ReadOnly Property TblGameAccounts() As System.Data.Linq.Table(Of TblGameAccount)
		Get
			Return Me.GetTable(Of TblGameAccount)
		End Get
	End Property
	
	Public ReadOnly Property TblMembers() As System.Data.Linq.Table(Of TblMember)
		Get
			Return Me.GetTable(Of TblMember)
		End Get
	End Property
	
	Public ReadOnly Property TblUsers() As System.Data.Linq.Table(Of TblUser)
		Get
			Return Me.GetTable(Of TblUser)
		End Get
	End Property
	
	Public ReadOnly Property TblTransfers() As System.Data.Linq.Table(Of TblTransfer)
		Get
			Return Me.GetTable(Of TblTransfer)
		End Get
	End Property
	
	Public ReadOnly Property TblBanks() As System.Data.Linq.Table(Of TblBank)
		Get
			Return Me.GetTable(Of TblBank)
		End Get
	End Property
	
	Public ReadOnly Property TblContacts() As System.Data.Linq.Table(Of TblContact)
		Get
			Return Me.GetTable(Of TblContact)
		End Get
	End Property
	
	Public ReadOnly Property TblPromotions() As System.Data.Linq.Table(Of TblPromotion)
		Get
			Return Me.GetTable(Of TblPromotion)
		End Get
	End Property
	
	Public ReadOnly Property TblTransactions() As System.Data.Linq.Table(Of TblTransaction)
		Get
			Return Me.GetTable(Of TblTransaction)
		End Get
	End Property
	
	Public ReadOnly Property TblAffiliates() As System.Data.Linq.Table(Of TblAffiliate)
		Get
			Return Me.GetTable(Of TblAffiliate)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblSlider")>  _
Partial Public Class TblSlider
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SliderID As Integer
	
	Private _DisplayIndex As Integer
	
	Private _SliderName As String
	
	Private _LinkUrl As String
	
	Private _SliderImage As String
	
	Private _Status As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSliderIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSliderIDChanged()
    End Sub
    Partial Private Sub OnDisplayIndexChanging(value As Integer)
    End Sub
    Partial Private Sub OnDisplayIndexChanged()
    End Sub
    Partial Private Sub OnSliderNameChanging(value As String)
    End Sub
    Partial Private Sub OnSliderNameChanged()
    End Sub
    Partial Private Sub OnLinkUrlChanging(value As String)
    End Sub
    Partial Private Sub OnLinkUrlChanged()
    End Sub
    Partial Private Sub OnSliderImageChanging(value As String)
    End Sub
    Partial Private Sub OnSliderImageChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As Boolean)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SliderID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SliderID() As Integer
		Get
			Return Me._SliderID
		End Get
		Set
			If ((Me._SliderID = value)  _
						= false) Then
				Me.OnSliderIDChanging(value)
				Me.SendPropertyChanging
				Me._SliderID = value
				Me.SendPropertyChanged("SliderID")
				Me.OnSliderIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DisplayIndex", DbType:="Int NOT NULL")>  _
	Public Property DisplayIndex() As Integer
		Get
			Return Me._DisplayIndex
		End Get
		Set
			If ((Me._DisplayIndex = value)  _
						= false) Then
				Me.OnDisplayIndexChanging(value)
				Me.SendPropertyChanging
				Me._DisplayIndex = value
				Me.SendPropertyChanged("DisplayIndex")
				Me.OnDisplayIndexChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SliderName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property SliderName() As String
		Get
			Return Me._SliderName
		End Get
		Set
			If (String.Equals(Me._SliderName, value) = false) Then
				Me.OnSliderNameChanging(value)
				Me.SendPropertyChanging
				Me._SliderName = value
				Me.SendPropertyChanged("SliderName")
				Me.OnSliderNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinkUrl", DbType:="NChar(255)")>  _
	Public Property LinkUrl() As String
		Get
			Return Me._LinkUrl
		End Get
		Set
			If (String.Equals(Me._LinkUrl, value) = false) Then
				Me.OnLinkUrlChanging(value)
				Me.SendPropertyChanging
				Me._LinkUrl = value
				Me.SendPropertyChanged("LinkUrl")
				Me.OnLinkUrlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SliderImage", DbType:="NChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property SliderImage() As String
		Get
			Return Me._SliderImage
		End Get
		Set
			If (String.Equals(Me._SliderImage, value) = false) Then
				Me.OnSliderImageChanging(value)
				Me.SendPropertyChanging
				Me._SliderImage = value
				Me.SendPropertyChanged("SliderImage")
				Me.OnSliderImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Bit NOT NULL")>  _
	Public Property Status() As Boolean
		Get
			Return Me._Status
		End Get
		Set
			If ((Me._Status = value)  _
						= false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblLog")>  _
Partial Public Class TblLog
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _LogID As Integer
	
	Private _LogMember As String
	
	Private _LogIP As String
	
	Private _LogType As Integer
	
	Private _LogDate As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLogIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnLogIDChanged()
    End Sub
    Partial Private Sub OnLogMemberChanging(value As String)
    End Sub
    Partial Private Sub OnLogMemberChanged()
    End Sub
    Partial Private Sub OnLogIPChanging(value As String)
    End Sub
    Partial Private Sub OnLogIPChanged()
    End Sub
    Partial Private Sub OnLogTypeChanging(value As Integer)
    End Sub
    Partial Private Sub OnLogTypeChanged()
    End Sub
    Partial Private Sub OnLogDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLogDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LogID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property LogID() As Integer
		Get
			Return Me._LogID
		End Get
		Set
			If ((Me._LogID = value)  _
						= false) Then
				Me.OnLogIDChanging(value)
				Me.SendPropertyChanging
				Me._LogID = value
				Me.SendPropertyChanged("LogID")
				Me.OnLogIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LogMember", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property LogMember() As String
		Get
			Return Me._LogMember
		End Get
		Set
			If (String.Equals(Me._LogMember, value) = false) Then
				Me.OnLogMemberChanging(value)
				Me.SendPropertyChanging
				Me._LogMember = value
				Me.SendPropertyChanged("LogMember")
				Me.OnLogMemberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LogIP", DbType:="NChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property LogIP() As String
		Get
			Return Me._LogIP
		End Get
		Set
			If (String.Equals(Me._LogIP, value) = false) Then
				Me.OnLogIPChanging(value)
				Me.SendPropertyChanging
				Me._LogIP = value
				Me.SendPropertyChanged("LogIP")
				Me.OnLogIPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LogType", DbType:="Int NOT NULL")>  _
	Public Property LogType() As Integer
		Get
			Return Me._LogType
		End Get
		Set
			If ((Me._LogType = value)  _
						= false) Then
				Me.OnLogTypeChanging(value)
				Me.SendPropertyChanging
				Me._LogType = value
				Me.SendPropertyChanged("LogType")
				Me.OnLogTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LogDate", DbType:="DateTime NOT NULL")>  _
	Public Property LogDate() As Date
		Get
			Return Me._LogDate
		End Get
		Set
			If ((Me._LogDate = value)  _
						= false) Then
				Me.OnLogDateChanging(value)
				Me.SendPropertyChanging
				Me._LogDate = value
				Me.SendPropertyChanged("LogDate")
				Me.OnLogDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblTRejectReason")>  _
Partial Public Class TblTRejectReason
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TrrID As Integer
	
	Private _TrReason As String
	
	Private _Status As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTrrIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTrrIDChanged()
    End Sub
    Partial Private Sub OnTrReasonChanging(value As String)
    End Sub
    Partial Private Sub OnTrReasonChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As Boolean)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TrrID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property TrrID() As Integer
		Get
			Return Me._TrrID
		End Get
		Set
			If ((Me._TrrID = value)  _
						= false) Then
				Me.OnTrrIDChanging(value)
				Me.SendPropertyChanging
				Me._TrrID = value
				Me.SendPropertyChanged("TrrID")
				Me.OnTrrIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TrReason", DbType:="NChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property TrReason() As String
		Get
			Return Me._TrReason
		End Get
		Set
			If (String.Equals(Me._TrReason, value) = false) Then
				Me.OnTrReasonChanging(value)
				Me.SendPropertyChanging
				Me._TrReason = value
				Me.SendPropertyChanged("TrReason")
				Me.OnTrReasonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Bit NOT NULL")>  _
	Public Property Status() As Boolean
		Get
			Return Me._Status
		End Get
		Set
			If ((Me._Status = value)  _
						= false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblBankRecord")>  _
Partial Public Class TblBankRecord
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BRecordID As Integer
	
	Private _BankID As Integer
	
	Private _TransactionID As Integer
	
	Private _Credit As Single
	
	Private _Debit As Single
	
	Private _Description As String
	
	Private _RecordDatetime As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBRecordIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBRecordIDChanged()
    End Sub
    Partial Private Sub OnBankIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBankIDChanged()
    End Sub
    Partial Private Sub OnTransactionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTransactionIDChanged()
    End Sub
    Partial Private Sub OnCreditChanging(value As Single)
    End Sub
    Partial Private Sub OnCreditChanged()
    End Sub
    Partial Private Sub OnDebitChanging(value As Single)
    End Sub
    Partial Private Sub OnDebitChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnRecordDatetimeChanging(value As Date)
    End Sub
    Partial Private Sub OnRecordDatetimeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BRecordID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property BRecordID() As Integer
		Get
			Return Me._BRecordID
		End Get
		Set
			If ((Me._BRecordID = value)  _
						= false) Then
				Me.OnBRecordIDChanging(value)
				Me.SendPropertyChanging
				Me._BRecordID = value
				Me.SendPropertyChanged("BRecordID")
				Me.OnBRecordIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankID", DbType:="Int NOT NULL")>  _
	Public Property BankID() As Integer
		Get
			Return Me._BankID
		End Get
		Set
			If ((Me._BankID = value)  _
						= false) Then
				Me.OnBankIDChanging(value)
				Me.SendPropertyChanging
				Me._BankID = value
				Me.SendPropertyChanged("BankID")
				Me.OnBankIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionID", DbType:="Int NOT NULL")>  _
	Public Property TransactionID() As Integer
		Get
			Return Me._TransactionID
		End Get
		Set
			If ((Me._TransactionID = value)  _
						= false) Then
				Me.OnTransactionIDChanging(value)
				Me.SendPropertyChanging
				Me._TransactionID = value
				Me.SendPropertyChanged("TransactionID")
				Me.OnTransactionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Credit", DbType:="Float NOT NULL")>  _
	Public Property Credit() As Single
		Get
			Return Me._Credit
		End Get
		Set
			If ((Me._Credit = value)  _
						= false) Then
				Me.OnCreditChanging(value)
				Me.SendPropertyChanging
				Me._Credit = value
				Me.SendPropertyChanged("Credit")
				Me.OnCreditChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Debit", DbType:="Float NOT NULL")>  _
	Public Property Debit() As Single
		Get
			Return Me._Debit
		End Get
		Set
			If ((Me._Debit = value)  _
						= false) Then
				Me.OnDebitChanging(value)
				Me.SendPropertyChanging
				Me._Debit = value
				Me.SendPropertyChanged("Debit")
				Me.OnDebitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NChar(255)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecordDatetime", DbType:="DateTime NOT NULL")>  _
	Public Property RecordDatetime() As Date
		Get
			Return Me._RecordDatetime
		End Get
		Set
			If ((Me._RecordDatetime = value)  _
						= false) Then
				Me.OnRecordDatetimeChanging(value)
				Me.SendPropertyChanging
				Me._RecordDatetime = value
				Me.SendPropertyChanged("RecordDatetime")
				Me.OnRecordDatetimeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblProduct")>  _
Partial Public Class TblProduct
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ProductID As Integer
	
	Private _ProductName As String
	
	Private _ProductAlias As String
	
	Private _Balance As Single
	
	Private _Status As Boolean
	
	Private _AndroidLink As String
	
	Private _iOSLink As String
	
	Private _WindowsLink As String
	
	Private _WebsiteUrl As String
	
	Private _ProductImage As String
	
	Private _CatSlot As Boolean
	
	Private _CatLive As Boolean
	
	Private _CatSport As Boolean
	
	Private _CatFish As Boolean
	
	Private _CatPoker As Boolean
	
	Private _CatRNG As Boolean
	
	Private _CatOther As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProductIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnProductNameChanging(value As String)
    End Sub
    Partial Private Sub OnProductNameChanged()
    End Sub
    Partial Private Sub OnProductAliasChanging(value As String)
    End Sub
    Partial Private Sub OnProductAliasChanged()
    End Sub
    Partial Private Sub OnBalanceChanging(value As Single)
    End Sub
    Partial Private Sub OnBalanceChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As Boolean)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnAndroidLinkChanging(value As String)
    End Sub
    Partial Private Sub OnAndroidLinkChanged()
    End Sub
    Partial Private Sub OniOSLinkChanging(value As String)
    End Sub
    Partial Private Sub OniOSLinkChanged()
    End Sub
    Partial Private Sub OnWindowsLinkChanging(value As String)
    End Sub
    Partial Private Sub OnWindowsLinkChanged()
    End Sub
    Partial Private Sub OnWebsiteUrlChanging(value As String)
    End Sub
    Partial Private Sub OnWebsiteUrlChanged()
    End Sub
    Partial Private Sub OnProductImageChanging(value As String)
    End Sub
    Partial Private Sub OnProductImageChanged()
    End Sub
    Partial Private Sub OnCatSlotChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCatSlotChanged()
    End Sub
    Partial Private Sub OnCatLiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCatLiveChanged()
    End Sub
    Partial Private Sub OnCatSportChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCatSportChanged()
    End Sub
    Partial Private Sub OnCatFishChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCatFishChanged()
    End Sub
    Partial Private Sub OnCatPokerChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCatPokerChanged()
    End Sub
    Partial Private Sub OnCatRNGChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCatRNGChanged()
    End Sub
    Partial Private Sub OnCatOtherChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCatOtherChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ProductID() As Integer
		Get
			Return Me._ProductID
		End Get
		Set
			If ((Me._ProductID = value)  _
						= false) Then
				Me.OnProductIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductID = value
				Me.SendPropertyChanged("ProductID")
				Me.OnProductIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property ProductName() As String
		Get
			Return Me._ProductName
		End Get
		Set
			If (String.Equals(Me._ProductName, value) = false) Then
				Me.OnProductNameChanging(value)
				Me.SendPropertyChanging
				Me._ProductName = value
				Me.SendPropertyChanged("ProductName")
				Me.OnProductNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductAlias", DbType:="NChar(30)")>  _
	Public Property ProductAlias() As String
		Get
			Return Me._ProductAlias
		End Get
		Set
			If (String.Equals(Me._ProductAlias, value) = false) Then
				Me.OnProductAliasChanging(value)
				Me.SendPropertyChanging
				Me._ProductAlias = value
				Me.SendPropertyChanged("ProductAlias")
				Me.OnProductAliasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Balance", DbType:="Float NOT NULL")>  _
	Public Property Balance() As Single
		Get
			Return Me._Balance
		End Get
		Set
			If ((Me._Balance = value)  _
						= false) Then
				Me.OnBalanceChanging(value)
				Me.SendPropertyChanging
				Me._Balance = value
				Me.SendPropertyChanged("Balance")
				Me.OnBalanceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Bit NOT NULL")>  _
	Public Property Status() As Boolean
		Get
			Return Me._Status
		End Get
		Set
			If ((Me._Status = value)  _
						= false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AndroidLink", DbType:="NChar(255)")>  _
	Public Property AndroidLink() As String
		Get
			Return Me._AndroidLink
		End Get
		Set
			If (String.Equals(Me._AndroidLink, value) = false) Then
				Me.OnAndroidLinkChanging(value)
				Me.SendPropertyChanging
				Me._AndroidLink = value
				Me.SendPropertyChanged("AndroidLink")
				Me.OnAndroidLinkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_iOSLink", DbType:="NChar(255)")>  _
	Public Property iOSLink() As String
		Get
			Return Me._iOSLink
		End Get
		Set
			If (String.Equals(Me._iOSLink, value) = false) Then
				Me.OniOSLinkChanging(value)
				Me.SendPropertyChanging
				Me._iOSLink = value
				Me.SendPropertyChanged("iOSLink")
				Me.OniOSLinkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WindowsLink", DbType:="NChar(255)")>  _
	Public Property WindowsLink() As String
		Get
			Return Me._WindowsLink
		End Get
		Set
			If (String.Equals(Me._WindowsLink, value) = false) Then
				Me.OnWindowsLinkChanging(value)
				Me.SendPropertyChanging
				Me._WindowsLink = value
				Me.SendPropertyChanged("WindowsLink")
				Me.OnWindowsLinkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WebsiteUrl", DbType:="NChar(255)")>  _
	Public Property WebsiteUrl() As String
		Get
			Return Me._WebsiteUrl
		End Get
		Set
			If (String.Equals(Me._WebsiteUrl, value) = false) Then
				Me.OnWebsiteUrlChanging(value)
				Me.SendPropertyChanging
				Me._WebsiteUrl = value
				Me.SendPropertyChanged("WebsiteUrl")
				Me.OnWebsiteUrlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductImage", DbType:="NChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property ProductImage() As String
		Get
			Return Me._ProductImage
		End Get
		Set
			If (String.Equals(Me._ProductImage, value) = false) Then
				Me.OnProductImageChanging(value)
				Me.SendPropertyChanging
				Me._ProductImage = value
				Me.SendPropertyChanged("ProductImage")
				Me.OnProductImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CatSlot", DbType:="Bit NOT NULL")>  _
	Public Property CatSlot() As Boolean
		Get
			Return Me._CatSlot
		End Get
		Set
			If ((Me._CatSlot = value)  _
						= false) Then
				Me.OnCatSlotChanging(value)
				Me.SendPropertyChanging
				Me._CatSlot = value
				Me.SendPropertyChanged("CatSlot")
				Me.OnCatSlotChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CatLive", DbType:="Bit NOT NULL")>  _
	Public Property CatLive() As Boolean
		Get
			Return Me._CatLive
		End Get
		Set
			If ((Me._CatLive = value)  _
						= false) Then
				Me.OnCatLiveChanging(value)
				Me.SendPropertyChanging
				Me._CatLive = value
				Me.SendPropertyChanged("CatLive")
				Me.OnCatLiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CatSport", DbType:="Bit NOT NULL")>  _
	Public Property CatSport() As Boolean
		Get
			Return Me._CatSport
		End Get
		Set
			If ((Me._CatSport = value)  _
						= false) Then
				Me.OnCatSportChanging(value)
				Me.SendPropertyChanging
				Me._CatSport = value
				Me.SendPropertyChanged("CatSport")
				Me.OnCatSportChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CatFish", DbType:="Bit NOT NULL")>  _
	Public Property CatFish() As Boolean
		Get
			Return Me._CatFish
		End Get
		Set
			If ((Me._CatFish = value)  _
						= false) Then
				Me.OnCatFishChanging(value)
				Me.SendPropertyChanging
				Me._CatFish = value
				Me.SendPropertyChanged("CatFish")
				Me.OnCatFishChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CatPoker", DbType:="Bit NOT NULL")>  _
	Public Property CatPoker() As Boolean
		Get
			Return Me._CatPoker
		End Get
		Set
			If ((Me._CatPoker = value)  _
						= false) Then
				Me.OnCatPokerChanging(value)
				Me.SendPropertyChanging
				Me._CatPoker = value
				Me.SendPropertyChanged("CatPoker")
				Me.OnCatPokerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CatRNG", DbType:="Bit NOT NULL")>  _
	Public Property CatRNG() As Boolean
		Get
			Return Me._CatRNG
		End Get
		Set
			If ((Me._CatRNG = value)  _
						= false) Then
				Me.OnCatRNGChanging(value)
				Me.SendPropertyChanging
				Me._CatRNG = value
				Me.SendPropertyChanged("CatRNG")
				Me.OnCatRNGChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CatOther", DbType:="Bit NOT NULL")>  _
	Public Property CatOther() As Boolean
		Get
			Return Me._CatOther
		End Get
		Set
			If ((Me._CatOther = value)  _
						= false) Then
				Me.OnCatOtherChanging(value)
				Me.SendPropertyChanging
				Me._CatOther = value
				Me.SendPropertyChanged("CatOther")
				Me.OnCatOtherChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblGameAccount")>  _
Partial Public Class TblGameAccount
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _GameID As Integer
	
	Private _UserName As String
	
	Private _Password As String
	
	Private _ProductID As Integer
	
	Private _DateCreated As Date
	
	Private _MemberUserName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGameIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnGameIDChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnProductIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnMemberUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnMemberUserNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GameID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property GameID() As Integer
		Get
			Return Me._GameID
		End Get
		Set
			If ((Me._GameID = value)  _
						= false) Then
				Me.OnGameIDChanging(value)
				Me.SendPropertyChanging
				Me._GameID = value
				Me.SendPropertyChanged("GameID")
				Me.OnGameIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", DbType:="Int NOT NULL")>  _
	Public Property ProductID() As Integer
		Get
			Return Me._ProductID
		End Get
		Set
			If ((Me._ProductID = value)  _
						= false) Then
				Me.OnProductIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductID = value
				Me.SendPropertyChanged("ProductID")
				Me.OnProductIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime NOT NULL")>  _
	Public Property DateCreated() As Date
		Get
			Return Me._DateCreated
		End Get
		Set
			If ((Me._DateCreated = value)  _
						= false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MemberUserName", DbType:="NChar(30)")>  _
	Public Property MemberUserName() As String
		Get
			Return Me._MemberUserName
		End Get
		Set
			If (String.Equals(Me._MemberUserName, value) = false) Then
				Me.OnMemberUserNameChanging(value)
				Me.SendPropertyChanging
				Me._MemberUserName = value
				Me.SendPropertyChanged("MemberUserName")
				Me.OnMemberUserNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblMember")>  _
Partial Public Class TblMember
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserID As Integer
	
	Private _UserName As String
	
	Private _Password As String
	
	Private _Email As String
	
	Private _PhoneNo As String
	
	Private _FullName As String
	
	Private _DateOfBirth As Date
	
	Private _RefCode As String
	
	Private _RefCodeReg As String
	
	Private _VipLevel As Integer
	
	Private _Promotion As Single
	
	Private _DateCreated As Date
	
	Private _LastModified As Date
	
	Private _IPAddress As String
	
	Private _GroupLeaderID As Integer
	
	Private _Enabled As Boolean
	
	Private _Remark As String
	
	Private _Affiliate As String
	
	Private _BankName As Integer
	
	Private _AccountNo As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnPhoneNoChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneNoChanged()
    End Sub
    Partial Private Sub OnFullNameChanging(value As String)
    End Sub
    Partial Private Sub OnFullNameChanged()
    End Sub
    Partial Private Sub OnDateOfBirthChanging(value As Date)
    End Sub
    Partial Private Sub OnDateOfBirthChanged()
    End Sub
    Partial Private Sub OnRefCodeChanging(value As String)
    End Sub
    Partial Private Sub OnRefCodeChanged()
    End Sub
    Partial Private Sub OnRefCodeRegChanging(value As String)
    End Sub
    Partial Private Sub OnRefCodeRegChanged()
    End Sub
    Partial Private Sub OnVipLevelChanging(value As Integer)
    End Sub
    Partial Private Sub OnVipLevelChanged()
    End Sub
    Partial Private Sub OnPromotionChanging(value As Single)
    End Sub
    Partial Private Sub OnPromotionChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnLastModifiedChanging(value As Date)
    End Sub
    Partial Private Sub OnLastModifiedChanged()
    End Sub
    Partial Private Sub OnIPAddressChanging(value As String)
    End Sub
    Partial Private Sub OnIPAddressChanged()
    End Sub
    Partial Private Sub OnGroupLeaderIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnGroupLeaderIDChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnRemarkChanging(value As String)
    End Sub
    Partial Private Sub OnRemarkChanged()
    End Sub
    Partial Private Sub OnAffiliateChanging(value As String)
    End Sub
    Partial Private Sub OnAffiliateChanged()
    End Sub
    Partial Private Sub OnBankNameChanging(value As Integer)
    End Sub
    Partial Private Sub OnBankNameChanged()
    End Sub
    Partial Private Sub OnAccountNoChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property UserID() As Integer
		Get
			Return Me._UserID
		End Get
		Set
			If ((Me._UserID = value)  _
						= false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNo", DbType:="NChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property PhoneNo() As String
		Get
			Return Me._PhoneNo
		End Get
		Set
			If (String.Equals(Me._PhoneNo, value) = false) Then
				Me.OnPhoneNoChanging(value)
				Me.SendPropertyChanging
				Me._PhoneNo = value
				Me.SendPropertyChanged("PhoneNo")
				Me.OnPhoneNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me.OnFullNameChanging(value)
				Me.SendPropertyChanging
				Me._FullName = value
				Me.SendPropertyChanged("FullName")
				Me.OnFullNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateOfBirth", DbType:="Date NOT NULL")>  _
	Public Property DateOfBirth() As Date
		Get
			Return Me._DateOfBirth
		End Get
		Set
			If ((Me._DateOfBirth = value)  _
						= false) Then
				Me.OnDateOfBirthChanging(value)
				Me.SendPropertyChanging
				Me._DateOfBirth = value
				Me.SendPropertyChanged("DateOfBirth")
				Me.OnDateOfBirthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RefCode", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property RefCode() As String
		Get
			Return Me._RefCode
		End Get
		Set
			If (String.Equals(Me._RefCode, value) = false) Then
				Me.OnRefCodeChanging(value)
				Me.SendPropertyChanging
				Me._RefCode = value
				Me.SendPropertyChanged("RefCode")
				Me.OnRefCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RefCodeReg", DbType:="NChar(30)")>  _
	Public Property RefCodeReg() As String
		Get
			Return Me._RefCodeReg
		End Get
		Set
			If (String.Equals(Me._RefCodeReg, value) = false) Then
				Me.OnRefCodeRegChanging(value)
				Me.SendPropertyChanging
				Me._RefCodeReg = value
				Me.SendPropertyChanged("RefCodeReg")
				Me.OnRefCodeRegChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VipLevel", DbType:="Int NOT NULL")>  _
	Public Property VipLevel() As Integer
		Get
			Return Me._VipLevel
		End Get
		Set
			If ((Me._VipLevel = value)  _
						= false) Then
				Me.OnVipLevelChanging(value)
				Me.SendPropertyChanging
				Me._VipLevel = value
				Me.SendPropertyChanged("VipLevel")
				Me.OnVipLevelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Promotion", DbType:="Float NOT NULL")>  _
	Public Property Promotion() As Single
		Get
			Return Me._Promotion
		End Get
		Set
			If ((Me._Promotion = value)  _
						= false) Then
				Me.OnPromotionChanging(value)
				Me.SendPropertyChanging
				Me._Promotion = value
				Me.SendPropertyChanged("Promotion")
				Me.OnPromotionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime NOT NULL")>  _
	Public Property DateCreated() As Date
		Get
			Return Me._DateCreated
		End Get
		Set
			If ((Me._DateCreated = value)  _
						= false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModified", DbType:="DateTime NOT NULL")>  _
	Public Property LastModified() As Date
		Get
			Return Me._LastModified
		End Get
		Set
			If ((Me._LastModified = value)  _
						= false) Then
				Me.OnLastModifiedChanging(value)
				Me.SendPropertyChanging
				Me._LastModified = value
				Me.SendPropertyChanged("LastModified")
				Me.OnLastModifiedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IPAddress", DbType:="NChar(20)")>  _
	Public Property IPAddress() As String
		Get
			Return Me._IPAddress
		End Get
		Set
			If (String.Equals(Me._IPAddress, value) = false) Then
				Me.OnIPAddressChanging(value)
				Me.SendPropertyChanging
				Me._IPAddress = value
				Me.SendPropertyChanged("IPAddress")
				Me.OnIPAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupLeaderID", DbType:="Int NOT NULL")>  _
	Public Property GroupLeaderID() As Integer
		Get
			Return Me._GroupLeaderID
		End Get
		Set
			If ((Me._GroupLeaderID = value)  _
						= false) Then
				Me.OnGroupLeaderIDChanging(value)
				Me.SendPropertyChanging
				Me._GroupLeaderID = value
				Me.SendPropertyChanged("GroupLeaderID")
				Me.OnGroupLeaderIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Enabled", DbType:="Bit NOT NULL")>  _
	Public Property Enabled() As Boolean
		Get
			Return Me._Enabled
		End Get
		Set
			If ((Me._Enabled = value)  _
						= false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Remark", DbType:="NChar(255)")>  _
	Public Property Remark() As String
		Get
			Return Me._Remark
		End Get
		Set
			If (String.Equals(Me._Remark, value) = false) Then
				Me.OnRemarkChanging(value)
				Me.SendPropertyChanging
				Me._Remark = value
				Me.SendPropertyChanged("Remark")
				Me.OnRemarkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Affiliate", DbType:="NChar(30)")>  _
	Public Property Affiliate() As String
		Get
			Return Me._Affiliate
		End Get
		Set
			If (String.Equals(Me._Affiliate, value) = false) Then
				Me.OnAffiliateChanging(value)
				Me.SendPropertyChanging
				Me._Affiliate = value
				Me.SendPropertyChanged("Affiliate")
				Me.OnAffiliateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankName", DbType:="Int NOT NULL")>  _
	Public Property BankName() As Integer
		Get
			Return Me._BankName
		End Get
		Set
			If ((Me._BankName = value)  _
						= false) Then
				Me.OnBankNameChanging(value)
				Me.SendPropertyChanging
				Me._BankName = value
				Me.SendPropertyChanged("BankName")
				Me.OnBankNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountNo", DbType:="NChar(30)")>  _
	Public Property AccountNo() As String
		Get
			Return Me._AccountNo
		End Get
		Set
			If (String.Equals(Me._AccountNo, value) = false) Then
				Me.OnAccountNoChanging(value)
				Me.SendPropertyChanging
				Me._AccountNo = value
				Me.SendPropertyChanged("AccountNo")
				Me.OnAccountNoChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblUser")>  _
Partial Public Class TblUser
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserID As Integer
	
	Private _UserName As String
	
	Private _Password As String
	
	Private _FullName As String
	
	Private _Email As String
	
	Private _DateCreated As Date
	
	Private _UserRole As Integer
	
	Private _Status As Boolean
	
	Private _LastLoginDate As Date
	
	Private _LastLoginIP As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnFullNameChanging(value As String)
    End Sub
    Partial Private Sub OnFullNameChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnUserRoleChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserRoleChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As Boolean)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnLastLoginDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastLoginDateChanged()
    End Sub
    Partial Private Sub OnLastLoginIPChanging(value As String)
    End Sub
    Partial Private Sub OnLastLoginIPChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property UserID() As Integer
		Get
			Return Me._UserID
		End Get
		Set
			If ((Me._UserID = value)  _
						= false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me.OnFullNameChanging(value)
				Me.SendPropertyChanging
				Me._FullName = value
				Me.SendPropertyChanged("FullName")
				Me.OnFullNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime NOT NULL")>  _
	Public Property DateCreated() As Date
		Get
			Return Me._DateCreated
		End Get
		Set
			If ((Me._DateCreated = value)  _
						= false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserRole", DbType:="Int NOT NULL")>  _
	Public Property UserRole() As Integer
		Get
			Return Me._UserRole
		End Get
		Set
			If ((Me._UserRole = value)  _
						= false) Then
				Me.OnUserRoleChanging(value)
				Me.SendPropertyChanging
				Me._UserRole = value
				Me.SendPropertyChanged("UserRole")
				Me.OnUserRoleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Bit NOT NULL")>  _
	Public Property Status() As Boolean
		Get
			Return Me._Status
		End Get
		Set
			If ((Me._Status = value)  _
						= false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLoginDate", DbType:="DateTime NOT NULL")>  _
	Public Property LastLoginDate() As Date
		Get
			Return Me._LastLoginDate
		End Get
		Set
			If ((Me._LastLoginDate = value)  _
						= false) Then
				Me.OnLastLoginDateChanging(value)
				Me.SendPropertyChanging
				Me._LastLoginDate = value
				Me.SendPropertyChanged("LastLoginDate")
				Me.OnLastLoginDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLoginIP", DbType:="NChar(20)")>  _
	Public Property LastLoginIP() As String
		Get
			Return Me._LastLoginIP
		End Get
		Set
			If (String.Equals(Me._LastLoginIP, value) = false) Then
				Me.OnLastLoginIPChanging(value)
				Me.SendPropertyChanging
				Me._LastLoginIP = value
				Me.SendPropertyChanged("LastLoginIP")
				Me.OnLastLoginIPChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblTransfer")>  _
Partial Public Class TblTransfer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TransferID As Integer
	
	Private _TransferDate As Date
	
	Private _UserName As String
	
	Private _FromProductID As Integer
	
	Private _FromUserName As String
	
	Private _ToProductID As Integer
	
	Private _ToUserName As String
	
	Private _Amount As Double
	
	Private _Status As System.Nullable(Of Integer)
	
	Private _IPAddress As String
	
	Private _Reason As String
	
	Private _ApproveByUser As String
	
	Private _ApproveDate As Date
	
	Private _Remark As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTransferIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTransferIDChanged()
    End Sub
    Partial Private Sub OnTransferDateChanging(value As Date)
    End Sub
    Partial Private Sub OnTransferDateChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnFromProductIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFromProductIDChanged()
    End Sub
    Partial Private Sub OnFromUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnFromUserNameChanged()
    End Sub
    Partial Private Sub OnToProductIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnToProductIDChanged()
    End Sub
    Partial Private Sub OnToUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnToUserNameChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As Double)
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnIPAddressChanging(value As String)
    End Sub
    Partial Private Sub OnIPAddressChanged()
    End Sub
    Partial Private Sub OnReasonChanging(value As String)
    End Sub
    Partial Private Sub OnReasonChanged()
    End Sub
    Partial Private Sub OnApproveByUserChanging(value As String)
    End Sub
    Partial Private Sub OnApproveByUserChanged()
    End Sub
    Partial Private Sub OnApproveDateChanging(value As Date)
    End Sub
    Partial Private Sub OnApproveDateChanged()
    End Sub
    Partial Private Sub OnRemarkChanging(value As String)
    End Sub
    Partial Private Sub OnRemarkChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransferID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property TransferID() As Integer
		Get
			Return Me._TransferID
		End Get
		Set
			If ((Me._TransferID = value)  _
						= false) Then
				Me.OnTransferIDChanging(value)
				Me.SendPropertyChanging
				Me._TransferID = value
				Me.SendPropertyChanged("TransferID")
				Me.OnTransferIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransferDate", DbType:="DateTime NOT NULL")>  _
	Public Property TransferDate() As Date
		Get
			Return Me._TransferDate
		End Get
		Set
			If ((Me._TransferDate = value)  _
						= false) Then
				Me.OnTransferDateChanging(value)
				Me.SendPropertyChanging
				Me._TransferDate = value
				Me.SendPropertyChanged("TransferDate")
				Me.OnTransferDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FromProductID", DbType:="Int NOT NULL")>  _
	Public Property FromProductID() As Integer
		Get
			Return Me._FromProductID
		End Get
		Set
			If ((Me._FromProductID = value)  _
						= false) Then
				Me.OnFromProductIDChanging(value)
				Me.SendPropertyChanging
				Me._FromProductID = value
				Me.SendPropertyChanged("FromProductID")
				Me.OnFromProductIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FromUserName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property FromUserName() As String
		Get
			Return Me._FromUserName
		End Get
		Set
			If (String.Equals(Me._FromUserName, value) = false) Then
				Me.OnFromUserNameChanging(value)
				Me.SendPropertyChanging
				Me._FromUserName = value
				Me.SendPropertyChanged("FromUserName")
				Me.OnFromUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ToProductID", DbType:="Int NOT NULL")>  _
	Public Property ToProductID() As Integer
		Get
			Return Me._ToProductID
		End Get
		Set
			If ((Me._ToProductID = value)  _
						= false) Then
				Me.OnToProductIDChanging(value)
				Me.SendPropertyChanging
				Me._ToProductID = value
				Me.SendPropertyChanged("ToProductID")
				Me.OnToProductIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ToUserName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property ToUserName() As String
		Get
			Return Me._ToUserName
		End Get
		Set
			If (String.Equals(Me._ToUserName, value) = false) Then
				Me.OnToUserNameChanging(value)
				Me.SendPropertyChanging
				Me._ToUserName = value
				Me.SendPropertyChanged("ToUserName")
				Me.OnToUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Float NOT NULL")>  _
	Public Property Amount() As Double
		Get
			Return Me._Amount
		End Get
		Set
			If ((Me._Amount = value)  _
						= false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Int")>  _
	Public Property Status() As System.Nullable(Of Integer)
		Get
			Return Me._Status
		End Get
		Set
			If (Me._Status.Equals(value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IPAddress", DbType:="NChar(20)")>  _
	Public Property IPAddress() As String
		Get
			Return Me._IPAddress
		End Get
		Set
			If (String.Equals(Me._IPAddress, value) = false) Then
				Me.OnIPAddressChanging(value)
				Me.SendPropertyChanging
				Me._IPAddress = value
				Me.SendPropertyChanged("IPAddress")
				Me.OnIPAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reason", DbType:="NChar(255)")>  _
	Public Property Reason() As String
		Get
			Return Me._Reason
		End Get
		Set
			If (String.Equals(Me._Reason, value) = false) Then
				Me.OnReasonChanging(value)
				Me.SendPropertyChanging
				Me._Reason = value
				Me.SendPropertyChanged("Reason")
				Me.OnReasonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApproveByUser", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property ApproveByUser() As String
		Get
			Return Me._ApproveByUser
		End Get
		Set
			If (String.Equals(Me._ApproveByUser, value) = false) Then
				Me.OnApproveByUserChanging(value)
				Me.SendPropertyChanging
				Me._ApproveByUser = value
				Me.SendPropertyChanged("ApproveByUser")
				Me.OnApproveByUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApproveDate", DbType:="DateTime NOT NULL")>  _
	Public Property ApproveDate() As Date
		Get
			Return Me._ApproveDate
		End Get
		Set
			If ((Me._ApproveDate = value)  _
						= false) Then
				Me.OnApproveDateChanging(value)
				Me.SendPropertyChanging
				Me._ApproveDate = value
				Me.SendPropertyChanged("ApproveDate")
				Me.OnApproveDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Remark", DbType:="NChar(255)")>  _
	Public Property Remark() As String
		Get
			Return Me._Remark
		End Get
		Set
			If (String.Equals(Me._Remark, value) = false) Then
				Me.OnRemarkChanging(value)
				Me.SendPropertyChanging
				Me._Remark = value
				Me.SendPropertyChanged("Remark")
				Me.OnRemarkChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblBank")>  _
Partial Public Class TblBank
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BankID As Integer
	
	Private _BankName As String
	
	Private _AccountName As String
	
	Private _AccountNo As String
	
	Private _Status As Integer
	
	Private _BankWeb As String
	
	Private _MinCredit As Single
	
	Private _MaxCredit As Single
	
	Private _MinDebit As Single
	
	Private _MaxDebit As Single
	
	Private _BankLogo As String
	
	Private _AllowCredit As Boolean
	
	Private _AllowDebit As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBankIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBankIDChanged()
    End Sub
    Partial Private Sub OnBankNameChanging(value As String)
    End Sub
    Partial Private Sub OnBankNameChanged()
    End Sub
    Partial Private Sub OnAccountNameChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNameChanged()
    End Sub
    Partial Private Sub OnAccountNoChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNoChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As Integer)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnBankWebChanging(value As String)
    End Sub
    Partial Private Sub OnBankWebChanged()
    End Sub
    Partial Private Sub OnMinCreditChanging(value As Single)
    End Sub
    Partial Private Sub OnMinCreditChanged()
    End Sub
    Partial Private Sub OnMaxCreditChanging(value As Single)
    End Sub
    Partial Private Sub OnMaxCreditChanged()
    End Sub
    Partial Private Sub OnMinDebitChanging(value As Single)
    End Sub
    Partial Private Sub OnMinDebitChanged()
    End Sub
    Partial Private Sub OnMaxDebitChanging(value As Single)
    End Sub
    Partial Private Sub OnMaxDebitChanged()
    End Sub
    Partial Private Sub OnBankLogoChanging(value As String)
    End Sub
    Partial Private Sub OnBankLogoChanged()
    End Sub
    Partial Private Sub OnAllowCreditChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAllowCreditChanged()
    End Sub
    Partial Private Sub OnAllowDebitChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAllowDebitChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property BankID() As Integer
		Get
			Return Me._BankID
		End Get
		Set
			If ((Me._BankID = value)  _
						= false) Then
				Me.OnBankIDChanging(value)
				Me.SendPropertyChanging
				Me._BankID = value
				Me.SendPropertyChanged("BankID")
				Me.OnBankIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property BankName() As String
		Get
			Return Me._BankName
		End Get
		Set
			If (String.Equals(Me._BankName, value) = false) Then
				Me.OnBankNameChanging(value)
				Me.SendPropertyChanging
				Me._BankName = value
				Me.SendPropertyChanged("BankName")
				Me.OnBankNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property AccountName() As String
		Get
			Return Me._AccountName
		End Get
		Set
			If (String.Equals(Me._AccountName, value) = false) Then
				Me.OnAccountNameChanging(value)
				Me.SendPropertyChanging
				Me._AccountName = value
				Me.SendPropertyChanged("AccountName")
				Me.OnAccountNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountNo", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property AccountNo() As String
		Get
			Return Me._AccountNo
		End Get
		Set
			If (String.Equals(Me._AccountNo, value) = false) Then
				Me.OnAccountNoChanging(value)
				Me.SendPropertyChanging
				Me._AccountNo = value
				Me.SendPropertyChanged("AccountNo")
				Me.OnAccountNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Int NOT NULL")>  _
	Public Property Status() As Integer
		Get
			Return Me._Status
		End Get
		Set
			If ((Me._Status = value)  _
						= false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankWeb", DbType:="NChar(255)")>  _
	Public Property BankWeb() As String
		Get
			Return Me._BankWeb
		End Get
		Set
			If (String.Equals(Me._BankWeb, value) = false) Then
				Me.OnBankWebChanging(value)
				Me.SendPropertyChanging
				Me._BankWeb = value
				Me.SendPropertyChanged("BankWeb")
				Me.OnBankWebChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MinCredit", DbType:="Float NOT NULL")>  _
	Public Property MinCredit() As Single
		Get
			Return Me._MinCredit
		End Get
		Set
			If ((Me._MinCredit = value)  _
						= false) Then
				Me.OnMinCreditChanging(value)
				Me.SendPropertyChanging
				Me._MinCredit = value
				Me.SendPropertyChanged("MinCredit")
				Me.OnMinCreditChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaxCredit", DbType:="Float NOT NULL")>  _
	Public Property MaxCredit() As Single
		Get
			Return Me._MaxCredit
		End Get
		Set
			If ((Me._MaxCredit = value)  _
						= false) Then
				Me.OnMaxCreditChanging(value)
				Me.SendPropertyChanging
				Me._MaxCredit = value
				Me.SendPropertyChanged("MaxCredit")
				Me.OnMaxCreditChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MinDebit", DbType:="Float NOT NULL")>  _
	Public Property MinDebit() As Single
		Get
			Return Me._MinDebit
		End Get
		Set
			If ((Me._MinDebit = value)  _
						= false) Then
				Me.OnMinDebitChanging(value)
				Me.SendPropertyChanging
				Me._MinDebit = value
				Me.SendPropertyChanged("MinDebit")
				Me.OnMinDebitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaxDebit", DbType:="Float NOT NULL")>  _
	Public Property MaxDebit() As Single
		Get
			Return Me._MaxDebit
		End Get
		Set
			If ((Me._MaxDebit = value)  _
						= false) Then
				Me.OnMaxDebitChanging(value)
				Me.SendPropertyChanging
				Me._MaxDebit = value
				Me.SendPropertyChanged("MaxDebit")
				Me.OnMaxDebitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankLogo", DbType:="NChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property BankLogo() As String
		Get
			Return Me._BankLogo
		End Get
		Set
			If (String.Equals(Me._BankLogo, value) = false) Then
				Me.OnBankLogoChanging(value)
				Me.SendPropertyChanging
				Me._BankLogo = value
				Me.SendPropertyChanged("BankLogo")
				Me.OnBankLogoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AllowCredit", DbType:="Bit NOT NULL")>  _
	Public Property AllowCredit() As Boolean
		Get
			Return Me._AllowCredit
		End Get
		Set
			If ((Me._AllowCredit = value)  _
						= false) Then
				Me.OnAllowCreditChanging(value)
				Me.SendPropertyChanging
				Me._AllowCredit = value
				Me.SendPropertyChanged("AllowCredit")
				Me.OnAllowCreditChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AllowDebit", DbType:="Bit NOT NULL")>  _
	Public Property AllowDebit() As Boolean
		Get
			Return Me._AllowDebit
		End Get
		Set
			If ((Me._AllowDebit = value)  _
						= false) Then
				Me.OnAllowDebitChanging(value)
				Me.SendPropertyChanging
				Me._AllowDebit = value
				Me.SendPropertyChanged("AllowDebit")
				Me.OnAllowDebitChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblContact")>  _
Partial Public Class TblContact
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ContactID As Integer
	
	Private _ContactType As Integer
	
	Private _ContactName As String
	
	Private _ContactTitle As String
	
	Private _Website As String
	
	Private _FaIcon As String
	
	Private _Status As Boolean
	
	Private _ShowFooter As Boolean
	
	Private _ShowContactPage As Boolean
	
	Private _ShowProductPage As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnContactIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnContactIDChanged()
    End Sub
    Partial Private Sub OnContactTypeChanging(value As Integer)
    End Sub
    Partial Private Sub OnContactTypeChanged()
    End Sub
    Partial Private Sub OnContactNameChanging(value As String)
    End Sub
    Partial Private Sub OnContactNameChanged()
    End Sub
    Partial Private Sub OnContactTitleChanging(value As String)
    End Sub
    Partial Private Sub OnContactTitleChanged()
    End Sub
    Partial Private Sub OnWebsiteChanging(value As String)
    End Sub
    Partial Private Sub OnWebsiteChanged()
    End Sub
    Partial Private Sub OnFaIconChanging(value As String)
    End Sub
    Partial Private Sub OnFaIconChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As Boolean)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnShowFooterChanging(value As Boolean)
    End Sub
    Partial Private Sub OnShowFooterChanged()
    End Sub
    Partial Private Sub OnShowContactPageChanging(value As Boolean)
    End Sub
    Partial Private Sub OnShowContactPageChanged()
    End Sub
    Partial Private Sub OnShowProductPageChanging(value As Boolean)
    End Sub
    Partial Private Sub OnShowProductPageChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ContactID() As Integer
		Get
			Return Me._ContactID
		End Get
		Set
			If ((Me._ContactID = value)  _
						= false) Then
				Me.OnContactIDChanging(value)
				Me.SendPropertyChanging
				Me._ContactID = value
				Me.SendPropertyChanged("ContactID")
				Me.OnContactIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactType", DbType:="Int NOT NULL")>  _
	Public Property ContactType() As Integer
		Get
			Return Me._ContactType
		End Get
		Set
			If ((Me._ContactType = value)  _
						= false) Then
				Me.OnContactTypeChanging(value)
				Me.SendPropertyChanging
				Me._ContactType = value
				Me.SendPropertyChanged("ContactType")
				Me.OnContactTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property ContactName() As String
		Get
			Return Me._ContactName
		End Get
		Set
			If (String.Equals(Me._ContactName, value) = false) Then
				Me.OnContactNameChanging(value)
				Me.SendPropertyChanging
				Me._ContactName = value
				Me.SendPropertyChanged("ContactName")
				Me.OnContactNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactTitle", DbType:="NChar(30)")>  _
	Public Property ContactTitle() As String
		Get
			Return Me._ContactTitle
		End Get
		Set
			If (String.Equals(Me._ContactTitle, value) = false) Then
				Me.OnContactTitleChanging(value)
				Me.SendPropertyChanging
				Me._ContactTitle = value
				Me.SendPropertyChanged("ContactTitle")
				Me.OnContactTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Website", DbType:="NChar(255)")>  _
	Public Property Website() As String
		Get
			Return Me._Website
		End Get
		Set
			If (String.Equals(Me._Website, value) = false) Then
				Me.OnWebsiteChanging(value)
				Me.SendPropertyChanging
				Me._Website = value
				Me.SendPropertyChanged("Website")
				Me.OnWebsiteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FaIcon", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property FaIcon() As String
		Get
			Return Me._FaIcon
		End Get
		Set
			If (String.Equals(Me._FaIcon, value) = false) Then
				Me.OnFaIconChanging(value)
				Me.SendPropertyChanging
				Me._FaIcon = value
				Me.SendPropertyChanged("FaIcon")
				Me.OnFaIconChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Bit NOT NULL")>  _
	Public Property Status() As Boolean
		Get
			Return Me._Status
		End Get
		Set
			If ((Me._Status = value)  _
						= false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowFooter", DbType:="Bit NOT NULL")>  _
	Public Property ShowFooter() As Boolean
		Get
			Return Me._ShowFooter
		End Get
		Set
			If ((Me._ShowFooter = value)  _
						= false) Then
				Me.OnShowFooterChanging(value)
				Me.SendPropertyChanging
				Me._ShowFooter = value
				Me.SendPropertyChanged("ShowFooter")
				Me.OnShowFooterChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowContactPage", DbType:="Bit NOT NULL")>  _
	Public Property ShowContactPage() As Boolean
		Get
			Return Me._ShowContactPage
		End Get
		Set
			If ((Me._ShowContactPage = value)  _
						= false) Then
				Me.OnShowContactPageChanging(value)
				Me.SendPropertyChanging
				Me._ShowContactPage = value
				Me.SendPropertyChanged("ShowContactPage")
				Me.OnShowContactPageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowProductPage", DbType:="Bit NOT NULL")>  _
	Public Property ShowProductPage() As Boolean
		Get
			Return Me._ShowProductPage
		End Get
		Set
			If ((Me._ShowProductPage = value)  _
						= false) Then
				Me.OnShowProductPageChanging(value)
				Me.SendPropertyChanging
				Me._ShowProductPage = value
				Me.SendPropertyChanged("ShowProductPage")
				Me.OnShowProductPageChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblPromotion")>  _
Partial Public Class TblPromotion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PromoID As Integer
	
	Private _DisplayIndex As Integer
	
	Private _PromoName As String
	
	Private _PromoType As Integer
	
	Private _PromoPercent As Single
	
	Private _MaxPayout As Single
	
	Private _EnglishName As String
	
	Private _ChineseName As String
	
	Private _MalayName As String
	
	Private _PromoFile As String
	
	Private _Status As Integer
	
	Private _PromoImage As String
	
	Private _AllowOnDeposit As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPromoIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPromoIDChanged()
    End Sub
    Partial Private Sub OnDisplayIndexChanging(value As Integer)
    End Sub
    Partial Private Sub OnDisplayIndexChanged()
    End Sub
    Partial Private Sub OnPromoNameChanging(value As String)
    End Sub
    Partial Private Sub OnPromoNameChanged()
    End Sub
    Partial Private Sub OnPromoTypeChanging(value As Integer)
    End Sub
    Partial Private Sub OnPromoTypeChanged()
    End Sub
    Partial Private Sub OnPromoPercentChanging(value As Single)
    End Sub
    Partial Private Sub OnPromoPercentChanged()
    End Sub
    Partial Private Sub OnMaxPayoutChanging(value As Single)
    End Sub
    Partial Private Sub OnMaxPayoutChanged()
    End Sub
    Partial Private Sub OnEnglishNameChanging(value As String)
    End Sub
    Partial Private Sub OnEnglishNameChanged()
    End Sub
    Partial Private Sub OnChineseNameChanging(value As String)
    End Sub
    Partial Private Sub OnChineseNameChanged()
    End Sub
    Partial Private Sub OnMalayNameChanging(value As String)
    End Sub
    Partial Private Sub OnMalayNameChanged()
    End Sub
    Partial Private Sub OnPromoFileChanging(value As String)
    End Sub
    Partial Private Sub OnPromoFileChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As Integer)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnPromoImageChanging(value As String)
    End Sub
    Partial Private Sub OnPromoImageChanged()
    End Sub
    Partial Private Sub OnAllowOnDepositChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAllowOnDepositChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PromoID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PromoID() As Integer
		Get
			Return Me._PromoID
		End Get
		Set
			If ((Me._PromoID = value)  _
						= false) Then
				Me.OnPromoIDChanging(value)
				Me.SendPropertyChanging
				Me._PromoID = value
				Me.SendPropertyChanged("PromoID")
				Me.OnPromoIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DisplayIndex", DbType:="Int NOT NULL")>  _
	Public Property DisplayIndex() As Integer
		Get
			Return Me._DisplayIndex
		End Get
		Set
			If ((Me._DisplayIndex = value)  _
						= false) Then
				Me.OnDisplayIndexChanging(value)
				Me.SendPropertyChanging
				Me._DisplayIndex = value
				Me.SendPropertyChanged("DisplayIndex")
				Me.OnDisplayIndexChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PromoName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property PromoName() As String
		Get
			Return Me._PromoName
		End Get
		Set
			If (String.Equals(Me._PromoName, value) = false) Then
				Me.OnPromoNameChanging(value)
				Me.SendPropertyChanging
				Me._PromoName = value
				Me.SendPropertyChanged("PromoName")
				Me.OnPromoNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PromoType", DbType:="Int NOT NULL")>  _
	Public Property PromoType() As Integer
		Get
			Return Me._PromoType
		End Get
		Set
			If ((Me._PromoType = value)  _
						= false) Then
				Me.OnPromoTypeChanging(value)
				Me.SendPropertyChanging
				Me._PromoType = value
				Me.SendPropertyChanged("PromoType")
				Me.OnPromoTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PromoPercent", DbType:="Float NOT NULL")>  _
	Public Property PromoPercent() As Single
		Get
			Return Me._PromoPercent
		End Get
		Set
			If ((Me._PromoPercent = value)  _
						= false) Then
				Me.OnPromoPercentChanging(value)
				Me.SendPropertyChanging
				Me._PromoPercent = value
				Me.SendPropertyChanged("PromoPercent")
				Me.OnPromoPercentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaxPayout", DbType:="Float NOT NULL")>  _
	Public Property MaxPayout() As Single
		Get
			Return Me._MaxPayout
		End Get
		Set
			If ((Me._MaxPayout = value)  _
						= false) Then
				Me.OnMaxPayoutChanging(value)
				Me.SendPropertyChanging
				Me._MaxPayout = value
				Me.SendPropertyChanged("MaxPayout")
				Me.OnMaxPayoutChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnglishName", DbType:="NChar(30)")>  _
	Public Property EnglishName() As String
		Get
			Return Me._EnglishName
		End Get
		Set
			If (String.Equals(Me._EnglishName, value) = false) Then
				Me.OnEnglishNameChanging(value)
				Me.SendPropertyChanging
				Me._EnglishName = value
				Me.SendPropertyChanged("EnglishName")
				Me.OnEnglishNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChineseName", DbType:="NChar(30)")>  _
	Public Property ChineseName() As String
		Get
			Return Me._ChineseName
		End Get
		Set
			If (String.Equals(Me._ChineseName, value) = false) Then
				Me.OnChineseNameChanging(value)
				Me.SendPropertyChanging
				Me._ChineseName = value
				Me.SendPropertyChanged("ChineseName")
				Me.OnChineseNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MalayName", DbType:="NChar(30)")>  _
	Public Property MalayName() As String
		Get
			Return Me._MalayName
		End Get
		Set
			If (String.Equals(Me._MalayName, value) = false) Then
				Me.OnMalayNameChanging(value)
				Me.SendPropertyChanging
				Me._MalayName = value
				Me.SendPropertyChanged("MalayName")
				Me.OnMalayNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PromoFile", DbType:="NChar(255)")>  _
	Public Property PromoFile() As String
		Get
			Return Me._PromoFile
		End Get
		Set
			If (String.Equals(Me._PromoFile, value) = false) Then
				Me.OnPromoFileChanging(value)
				Me.SendPropertyChanging
				Me._PromoFile = value
				Me.SendPropertyChanged("PromoFile")
				Me.OnPromoFileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Int NOT NULL")>  _
	Public Property Status() As Integer
		Get
			Return Me._Status
		End Get
		Set
			If ((Me._Status = value)  _
						= false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PromoImage", DbType:="NChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property PromoImage() As String
		Get
			Return Me._PromoImage
		End Get
		Set
			If (String.Equals(Me._PromoImage, value) = false) Then
				Me.OnPromoImageChanging(value)
				Me.SendPropertyChanging
				Me._PromoImage = value
				Me.SendPropertyChanged("PromoImage")
				Me.OnPromoImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AllowOnDeposit", DbType:="Bit NOT NULL")>  _
	Public Property AllowOnDeposit() As Boolean
		Get
			Return Me._AllowOnDeposit
		End Get
		Set
			If ((Me._AllowOnDeposit = value)  _
						= false) Then
				Me.OnAllowOnDepositChanging(value)
				Me.SendPropertyChanging
				Me._AllowOnDeposit = value
				Me.SendPropertyChanged("AllowOnDeposit")
				Me.OnAllowOnDepositChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblTransaction")>  _
Partial Public Class TblTransaction
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TransactionID As Integer
	
	Private _TransactionDate As Date
	
	Private _UserName As String
	
	Private _Method As String
	
	Private _TransType As Integer
	
	Private _Debit As Single
	
	Private _Credit As Single
	
	Private _Promotion As Single
	
	Private _Channel As Integer
	
	Private _Reason As String
	
	Private _ProductID As Integer
	
	Private _ProductUserName As String
	
	Private _Bank As String
	
	Private _BankAccount As String
	
	Private _UploadFile As String
	
	Private _Reference As String
	
	Private _Status As Integer
	
	Private _IPAddress As String
	
	Private _ApproveByUser As String
	
	Private _ApproveDate As Date
	
	Private _Remark As String
	
	Private _TransactionDateUser As Date
	
	Private _ApproveBankID As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTransactionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTransactionIDChanged()
    End Sub
    Partial Private Sub OnTransactionDateChanging(value As Date)
    End Sub
    Partial Private Sub OnTransactionDateChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnMethodChanging(value As String)
    End Sub
    Partial Private Sub OnMethodChanged()
    End Sub
    Partial Private Sub OnTransTypeChanging(value As Integer)
    End Sub
    Partial Private Sub OnTransTypeChanged()
    End Sub
    Partial Private Sub OnDebitChanging(value As Single)
    End Sub
    Partial Private Sub OnDebitChanged()
    End Sub
    Partial Private Sub OnCreditChanging(value As Single)
    End Sub
    Partial Private Sub OnCreditChanged()
    End Sub
    Partial Private Sub OnPromotionChanging(value As Single)
    End Sub
    Partial Private Sub OnPromotionChanged()
    End Sub
    Partial Private Sub OnChannelChanging(value As Integer)
    End Sub
    Partial Private Sub OnChannelChanged()
    End Sub
    Partial Private Sub OnReasonChanging(value As String)
    End Sub
    Partial Private Sub OnReasonChanged()
    End Sub
    Partial Private Sub OnProductIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnProductUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnProductUserNameChanged()
    End Sub
    Partial Private Sub OnBankChanging(value As String)
    End Sub
    Partial Private Sub OnBankChanged()
    End Sub
    Partial Private Sub OnBankAccountChanging(value As String)
    End Sub
    Partial Private Sub OnBankAccountChanged()
    End Sub
    Partial Private Sub OnUploadFileChanging(value As String)
    End Sub
    Partial Private Sub OnUploadFileChanged()
    End Sub
    Partial Private Sub OnReferenceChanging(value As String)
    End Sub
    Partial Private Sub OnReferenceChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As Integer)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnIPAddressChanging(value As String)
    End Sub
    Partial Private Sub OnIPAddressChanged()
    End Sub
    Partial Private Sub OnApproveByUserChanging(value As String)
    End Sub
    Partial Private Sub OnApproveByUserChanged()
    End Sub
    Partial Private Sub OnApproveDateChanging(value As Date)
    End Sub
    Partial Private Sub OnApproveDateChanged()
    End Sub
    Partial Private Sub OnRemarkChanging(value As String)
    End Sub
    Partial Private Sub OnRemarkChanged()
    End Sub
    Partial Private Sub OnTransactionDateUserChanging(value As Date)
    End Sub
    Partial Private Sub OnTransactionDateUserChanged()
    End Sub
    Partial Private Sub OnApproveBankIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnApproveBankIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property TransactionID() As Integer
		Get
			Return Me._TransactionID
		End Get
		Set
			If ((Me._TransactionID = value)  _
						= false) Then
				Me.OnTransactionIDChanging(value)
				Me.SendPropertyChanging
				Me._TransactionID = value
				Me.SendPropertyChanged("TransactionID")
				Me.OnTransactionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionDate", DbType:="DateTime NOT NULL")>  _
	Public Property TransactionDate() As Date
		Get
			Return Me._TransactionDate
		End Get
		Set
			If ((Me._TransactionDate = value)  _
						= false) Then
				Me.OnTransactionDateChanging(value)
				Me.SendPropertyChanging
				Me._TransactionDate = value
				Me.SendPropertyChanged("TransactionDate")
				Me.OnTransactionDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Method", DbType:="NChar(120) NOT NULL", CanBeNull:=false)>  _
	Public Property Method() As String
		Get
			Return Me._Method
		End Get
		Set
			If (String.Equals(Me._Method, value) = false) Then
				Me.OnMethodChanging(value)
				Me.SendPropertyChanging
				Me._Method = value
				Me.SendPropertyChanged("Method")
				Me.OnMethodChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransType", DbType:="Int NOT NULL")>  _
	Public Property TransType() As Integer
		Get
			Return Me._TransType
		End Get
		Set
			If ((Me._TransType = value)  _
						= false) Then
				Me.OnTransTypeChanging(value)
				Me.SendPropertyChanging
				Me._TransType = value
				Me.SendPropertyChanged("TransType")
				Me.OnTransTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Debit", DbType:="Float NOT NULL")>  _
	Public Property Debit() As Single
		Get
			Return Me._Debit
		End Get
		Set
			If ((Me._Debit = value)  _
						= false) Then
				Me.OnDebitChanging(value)
				Me.SendPropertyChanging
				Me._Debit = value
				Me.SendPropertyChanged("Debit")
				Me.OnDebitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Credit", DbType:="Float NOT NULL")>  _
	Public Property Credit() As Single
		Get
			Return Me._Credit
		End Get
		Set
			If ((Me._Credit = value)  _
						= false) Then
				Me.OnCreditChanging(value)
				Me.SendPropertyChanging
				Me._Credit = value
				Me.SendPropertyChanged("Credit")
				Me.OnCreditChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Promotion", DbType:="Float NOT NULL")>  _
	Public Property Promotion() As Single
		Get
			Return Me._Promotion
		End Get
		Set
			If ((Me._Promotion = value)  _
						= false) Then
				Me.OnPromotionChanging(value)
				Me.SendPropertyChanging
				Me._Promotion = value
				Me.SendPropertyChanged("Promotion")
				Me.OnPromotionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Channel", DbType:="Int NOT NULL")>  _
	Public Property Channel() As Integer
		Get
			Return Me._Channel
		End Get
		Set
			If ((Me._Channel = value)  _
						= false) Then
				Me.OnChannelChanging(value)
				Me.SendPropertyChanging
				Me._Channel = value
				Me.SendPropertyChanged("Channel")
				Me.OnChannelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reason", DbType:="NChar(255)")>  _
	Public Property Reason() As String
		Get
			Return Me._Reason
		End Get
		Set
			If (String.Equals(Me._Reason, value) = false) Then
				Me.OnReasonChanging(value)
				Me.SendPropertyChanging
				Me._Reason = value
				Me.SendPropertyChanged("Reason")
				Me.OnReasonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", DbType:="Int NOT NULL")>  _
	Public Property ProductID() As Integer
		Get
			Return Me._ProductID
		End Get
		Set
			If ((Me._ProductID = value)  _
						= false) Then
				Me.OnProductIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductID = value
				Me.SendPropertyChanged("ProductID")
				Me.OnProductIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductUserName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property ProductUserName() As String
		Get
			Return Me._ProductUserName
		End Get
		Set
			If (String.Equals(Me._ProductUserName, value) = false) Then
				Me.OnProductUserNameChanging(value)
				Me.SendPropertyChanging
				Me._ProductUserName = value
				Me.SendPropertyChanged("ProductUserName")
				Me.OnProductUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bank", DbType:="NChar(30)")>  _
	Public Property Bank() As String
		Get
			Return Me._Bank
		End Get
		Set
			If (String.Equals(Me._Bank, value) = false) Then
				Me.OnBankChanging(value)
				Me.SendPropertyChanging
				Me._Bank = value
				Me.SendPropertyChanged("Bank")
				Me.OnBankChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankAccount", DbType:="NChar(30)")>  _
	Public Property BankAccount() As String
		Get
			Return Me._BankAccount
		End Get
		Set
			If (String.Equals(Me._BankAccount, value) = false) Then
				Me.OnBankAccountChanging(value)
				Me.SendPropertyChanging
				Me._BankAccount = value
				Me.SendPropertyChanged("BankAccount")
				Me.OnBankAccountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UploadFile", DbType:="NChar(255)")>  _
	Public Property UploadFile() As String
		Get
			Return Me._UploadFile
		End Get
		Set
			If (String.Equals(Me._UploadFile, value) = false) Then
				Me.OnUploadFileChanging(value)
				Me.SendPropertyChanging
				Me._UploadFile = value
				Me.SendPropertyChanged("UploadFile")
				Me.OnUploadFileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reference", DbType:="NChar(30)")>  _
	Public Property Reference() As String
		Get
			Return Me._Reference
		End Get
		Set
			If (String.Equals(Me._Reference, value) = false) Then
				Me.OnReferenceChanging(value)
				Me.SendPropertyChanging
				Me._Reference = value
				Me.SendPropertyChanged("Reference")
				Me.OnReferenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Int NOT NULL")>  _
	Public Property Status() As Integer
		Get
			Return Me._Status
		End Get
		Set
			If ((Me._Status = value)  _
						= false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IPAddress", DbType:="NChar(20)")>  _
	Public Property IPAddress() As String
		Get
			Return Me._IPAddress
		End Get
		Set
			If (String.Equals(Me._IPAddress, value) = false) Then
				Me.OnIPAddressChanging(value)
				Me.SendPropertyChanging
				Me._IPAddress = value
				Me.SendPropertyChanged("IPAddress")
				Me.OnIPAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApproveByUser", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property ApproveByUser() As String
		Get
			Return Me._ApproveByUser
		End Get
		Set
			If (String.Equals(Me._ApproveByUser, value) = false) Then
				Me.OnApproveByUserChanging(value)
				Me.SendPropertyChanging
				Me._ApproveByUser = value
				Me.SendPropertyChanged("ApproveByUser")
				Me.OnApproveByUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApproveDate", DbType:="DateTime NOT NULL")>  _
	Public Property ApproveDate() As Date
		Get
			Return Me._ApproveDate
		End Get
		Set
			If ((Me._ApproveDate = value)  _
						= false) Then
				Me.OnApproveDateChanging(value)
				Me.SendPropertyChanging
				Me._ApproveDate = value
				Me.SendPropertyChanged("ApproveDate")
				Me.OnApproveDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Remark", DbType:="NChar(255)")>  _
	Public Property Remark() As String
		Get
			Return Me._Remark
		End Get
		Set
			If (String.Equals(Me._Remark, value) = false) Then
				Me.OnRemarkChanging(value)
				Me.SendPropertyChanging
				Me._Remark = value
				Me.SendPropertyChanged("Remark")
				Me.OnRemarkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionDateUser", DbType:="DateTime NOT NULL")>  _
	Public Property TransactionDateUser() As Date
		Get
			Return Me._TransactionDateUser
		End Get
		Set
			If ((Me._TransactionDateUser = value)  _
						= false) Then
				Me.OnTransactionDateUserChanging(value)
				Me.SendPropertyChanging
				Me._TransactionDateUser = value
				Me.SendPropertyChanged("TransactionDateUser")
				Me.OnTransactionDateUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApproveBankID", DbType:="Int NOT NULL")>  _
	Public Property ApproveBankID() As Integer
		Get
			Return Me._ApproveBankID
		End Get
		Set
			If ((Me._ApproveBankID = value)  _
						= false) Then
				Me.OnApproveBankIDChanging(value)
				Me.SendPropertyChanging
				Me._ApproveBankID = value
				Me.SendPropertyChanged("ApproveBankID")
				Me.OnApproveBankIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblAffiliate")>  _
Partial Public Class TblAffiliate
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AffiliateID As Integer
	
	Private _Code As String
	
	Private _UserName As String
	
	Private _Password As String
	
	Private _FullName As String
	
	Private _Email As String
	
	Private _PhoneNo As String
	
	Private _DateCreated As Date
	
	Private _Status As Boolean
	
	Private _Calculation As Integer
	
	Private _Percentage As Single
	
	Private _LastLoginDate As Date
	
	Private _LastLoginIP As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAffiliateIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnAffiliateIDChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnFullNameChanging(value As String)
    End Sub
    Partial Private Sub OnFullNameChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnPhoneNoChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneNoChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As Boolean)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnCalculationChanging(value As Integer)
    End Sub
    Partial Private Sub OnCalculationChanged()
    End Sub
    Partial Private Sub OnPercentageChanging(value As Single)
    End Sub
    Partial Private Sub OnPercentageChanged()
    End Sub
    Partial Private Sub OnLastLoginDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastLoginDateChanged()
    End Sub
    Partial Private Sub OnLastLoginIPChanging(value As String)
    End Sub
    Partial Private Sub OnLastLoginIPChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AffiliateID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property AffiliateID() As Integer
		Get
			Return Me._AffiliateID
		End Get
		Set
			If ((Me._AffiliateID = value)  _
						= false) Then
				Me.OnAffiliateIDChanging(value)
				Me.SendPropertyChanging
				Me._AffiliateID = value
				Me.SendPropertyChanged("AffiliateID")
				Me.OnAffiliateIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Code", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me.OnFullNameChanging(value)
				Me.SendPropertyChanging
				Me._FullName = value
				Me.SendPropertyChanged("FullName")
				Me.OnFullNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNo", DbType:="NChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property PhoneNo() As String
		Get
			Return Me._PhoneNo
		End Get
		Set
			If (String.Equals(Me._PhoneNo, value) = false) Then
				Me.OnPhoneNoChanging(value)
				Me.SendPropertyChanging
				Me._PhoneNo = value
				Me.SendPropertyChanged("PhoneNo")
				Me.OnPhoneNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime NOT NULL")>  _
	Public Property DateCreated() As Date
		Get
			Return Me._DateCreated
		End Get
		Set
			If ((Me._DateCreated = value)  _
						= false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Bit NOT NULL")>  _
	Public Property Status() As Boolean
		Get
			Return Me._Status
		End Get
		Set
			If ((Me._Status = value)  _
						= false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Calculation", DbType:="Int NOT NULL")>  _
	Public Property Calculation() As Integer
		Get
			Return Me._Calculation
		End Get
		Set
			If ((Me._Calculation = value)  _
						= false) Then
				Me.OnCalculationChanging(value)
				Me.SendPropertyChanging
				Me._Calculation = value
				Me.SendPropertyChanged("Calculation")
				Me.OnCalculationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Percentage", DbType:="Float NOT NULL")>  _
	Public Property Percentage() As Single
		Get
			Return Me._Percentage
		End Get
		Set
			If ((Me._Percentage = value)  _
						= false) Then
				Me.OnPercentageChanging(value)
				Me.SendPropertyChanging
				Me._Percentage = value
				Me.SendPropertyChanged("Percentage")
				Me.OnPercentageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLoginDate", DbType:="DateTime NOT NULL")>  _
	Public Property LastLoginDate() As Date
		Get
			Return Me._LastLoginDate
		End Get
		Set
			If ((Me._LastLoginDate = value)  _
						= false) Then
				Me.OnLastLoginDateChanging(value)
				Me.SendPropertyChanging
				Me._LastLoginDate = value
				Me.SendPropertyChanged("LastLoginDate")
				Me.OnLastLoginDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLoginIP", DbType:="NChar(20)")>  _
	Public Property LastLoginIP() As String
		Get
			Return Me._LastLoginIP
		End Get
		Set
			If (String.Equals(Me._LastLoginIP, value) = false) Then
				Me.OnLastLoginIPChanging(value)
				Me.SendPropertyChanging
				Me._LastLoginIP = value
				Me.SendPropertyChanged("LastLoginIP")
				Me.OnLastLoginIPChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
